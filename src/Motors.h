// Generated by gencpp from file motors_data_msgs_ros1/Motors.msg
// DO NOT EDIT!


#ifndef MOTORS_DATA_MSGS_ROS1_MESSAGE_MOTORS_H
#define MOTORS_DATA_MSGS_ROS1_MESSAGE_MOTORS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motors_data_msgs_ros1
{
template <class ContainerAllocator>
struct Motors_
{
  typedef Motors_<ContainerAllocator> Type;

  Motors_()
    : motor1(0)
    , motor2(0)
    , motor3(0)
    , motor4(0)
    , dir1(false)
    , dir2(false)
    , dir3(false)
    , dir4(false)  {
    }
  Motors_(const ContainerAllocator& _alloc)
    : motor1(0)
    , motor2(0)
    , motor3(0)
    , motor4(0)
    , dir1(false)
    , dir2(false)
    , dir3(false)
    , dir4(false)  {
  (void)_alloc;
    }



   typedef uint8_t _motor1_type;
  _motor1_type motor1;

   typedef uint8_t _motor2_type;
  _motor2_type motor2;

   typedef uint8_t _motor3_type;
  _motor3_type motor3;

   typedef uint8_t _motor4_type;
  _motor4_type motor4;

   typedef uint8_t _dir1_type;
  _dir1_type dir1;

   typedef uint8_t _dir2_type;
  _dir2_type dir2;

   typedef uint8_t _dir3_type;
  _dir3_type dir3;

   typedef uint8_t _dir4_type;
  _dir4_type dir4;





  typedef boost::shared_ptr< ::motors_data_msgs_ros1::Motors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motors_data_msgs_ros1::Motors_<ContainerAllocator> const> ConstPtr;

}; // struct Motors_

typedef ::motors_data_msgs_ros1::Motors_<std::allocator<void> > Motors;

typedef boost::shared_ptr< ::motors_data_msgs_ros1::Motors > MotorsPtr;
typedef boost::shared_ptr< ::motors_data_msgs_ros1::Motors const> MotorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motors_data_msgs_ros1::Motors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motors_data_msgs_ros1::Motors_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motors_data_msgs_ros1::Motors_<ContainerAllocator1> & lhs, const ::motors_data_msgs_ros1::Motors_<ContainerAllocator2> & rhs)
{
  return lhs.motor1 == rhs.motor1 &&
    lhs.motor2 == rhs.motor2 &&
    lhs.motor3 == rhs.motor3 &&
    lhs.motor4 == rhs.motor4 &&
    lhs.dir1 == rhs.dir1 &&
    lhs.dir2 == rhs.dir2 &&
    lhs.dir3 == rhs.dir3 &&
    lhs.dir4 == rhs.dir4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motors_data_msgs_ros1::Motors_<ContainerAllocator1> & lhs, const ::motors_data_msgs_ros1::Motors_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motors_data_msgs_ros1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::motors_data_msgs_ros1::Motors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motors_data_msgs_ros1::Motors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motors_data_msgs_ros1::Motors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motors_data_msgs_ros1::Motors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motors_data_msgs_ros1::Motors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motors_data_msgs_ros1::Motors_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motors_data_msgs_ros1::Motors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "49af4221d0d3f44dae862767ad5a1e1f";
  }

  static const char* value(const ::motors_data_msgs_ros1::Motors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x49af4221d0d3f44dULL;
  static const uint64_t static_value2 = 0xae862767ad5a1e1fULL;
};

template<class ContainerAllocator>
struct DataType< ::motors_data_msgs_ros1::Motors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motors_data_msgs_ros1/Motors";
  }

  static const char* value(const ::motors_data_msgs_ros1::Motors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motors_data_msgs_ros1::Motors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 motor1\n"
"uint8 motor2\n"
"uint8 motor3\n"
"uint8 motor4\n"
"\n"
"bool dir1\n"
"bool dir2\n"
"bool dir3\n"
"bool dir4\n"
;
  }

  static const char* value(const ::motors_data_msgs_ros1::Motors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motors_data_msgs_ros1::Motors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor1);
      stream.next(m.motor2);
      stream.next(m.motor3);
      stream.next(m.motor4);
      stream.next(m.dir1);
      stream.next(m.dir2);
      stream.next(m.dir3);
      stream.next(m.dir4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Motors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motors_data_msgs_ros1::Motors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motors_data_msgs_ros1::Motors_<ContainerAllocator>& v)
  {
    s << indent << "motor1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor1);
    s << indent << "motor2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor2);
    s << indent << "motor3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor3);
    s << indent << "motor4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor4);
    s << indent << "dir1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dir1);
    s << indent << "dir2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dir2);
    s << indent << "dir3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dir3);
    s << indent << "dir4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dir4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTORS_DATA_MSGS_ROS1_MESSAGE_MOTORS_H